[{"name":"app.R","content":"#the libraries required to run this code\nlibrary(shiny)\nlibrary(DT)\nlibrary(shinylive)\n\n\n# implements the ui into a variable\nui <- fluidPage(\n  #title\n  titlePanel(\"Retirement Simulation\"),\n  \n  #All the inputs\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"mean_input\", \"Average Gain (%)\", value = 7.25, step = 0.25),\n      numericInput(\"stdv_input\", \"Portfolio Std Dev (%)\", value = 13.5, step = 0.25),\n      numericInput(\"t_input\", \"Time (2-50 Years)\", value = 30, min = 2, max = 50, step = 1),\n      numericInput(\"capital_input\", \"Initial Portfolio Value\", value = 5000000, step = 50000),\n      numericInput(\"initial_percent\", \"Initial Withdrawal Rate (%)\", value = 5, step = 0.25),\n      numericInput(\"floor_percent\", \"Minimum Withdrawal Rate (%)\", value = 3, step = 0.25),\n      numericInput(\"spending_inc\", \"Spending Increase (%)\", value = 10, step = 0.5),\n      numericInput(\"spending_dec\", \"Spending Decrease (%)\", value = 20, step = 0.5),\n      selectInput(\"lowPoS_input\", \"Lower Probability Threshold (%)\", \n                  choices = c(20, 30, 40, 50, 60, 70), selected = 60),\n      selectInput(\"upPoS_input\", \"Upper Probability Threshold (%)\", \n                  choices = c(30, 40, 50, 60, 70, 80), selected = 80),\n      numericInput(\"inflation\", \"Inflation Rate (%)\", value = 2.5, step = 0.25),\n      numericInput(\"trials\", \"Number of Trials (100-5000)\", value = 1000, min = 100, max = 5000, step = 1),\n      \n      #Cashflow 1\n      h4(\"Additional Cash Flow #1\"),\n      checkboxInput(\"cashflow_1\", \"Recieving Cash Flow?\", value = FALSE),\n      \n      conditionalPanel(\n        condition = \"input.cashflow_1 == true\",\n        sliderInput(\"rangeinput_1\", \"During Which Years Will You Recieve This Income? Select a Range:\",\n                    min = 0, max = 50,\n                    value = c(15, 30))\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_1 == true\",\n        numericInput(\"flowamount_1\", \"Amount Recieved Each Year.\", min = 0, value = 25000, step = 1000)\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_1 == true\",\n        checkboxInput(\"inflation_1\", \"Will this be inflation adjusted?\", value = F)\n      ),\n      \n      #Cashflow 2\n      h4(\"Additional Cash Flow #2\"),\n      checkboxInput(\"cashflow_2\", \"Recieving Cash Flow?\", value = FALSE),\n      \n      conditionalPanel(\n        condition = \"input.cashflow_2 == true\",\n        sliderInput(\"rangeinput_2\", \"During Which Years Will You Recieve This Income? Select a Range:\",\n                    min = 0, max = 50,\n                    value = c(15, 30))\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_2 == true\",\n        numericInput(\"flowamount_2\", \"Amount Recieved Each Year.\", min = 0, value = 25000, step = 1000)\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_2 == true\",\n        checkboxInput(\"inflation_2\", \"Will this be inflation adjusted?\", value = F)\n      ),\n      \n      #Cashflow 3\n      h4(\"Additional Cash Flow #3\"),\n      checkboxInput(\"cashflow_3\", \"Recieving Cash Flow?\", value = FALSE),\n      \n      conditionalPanel(\n        condition = \"input.cashflow_3 == true\",\n        sliderInput(\"rangeinput_3\", \"During Which Years Will You Recieve This Income? Select a Range:\",\n                    min = 0, max = 50,\n                    value = c(15, 30))\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_3 == true\",\n        numericInput(\"flowamount_3\", \"Amount Recieved Each Year.\", min = 0, value = 25000, step = 1000)\n      ),\n      conditionalPanel(\n        condition = \"input.cashflow_3 == true\",\n        checkboxInput(\"inflation_3\", \"Will this be inflation adjusted?\", value = F)\n      ),\n      \n      actionButton(\"run\", \"Run Simulation\"),\n      textOutput(\"status\"),\n      \n    ),\n    #Creates the titles, gives the spot to display information\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Summary\",\n                 h3(\"Summary Output\"),\n                 tableOutput(\"outputs1\"),\n                 plotOutput(\"result_plot\"),\n                 plotOutput(\"result_plot2\"),\n                 plotOutput(\"result_plot3\"),\n                 \n                 plotOutput(\"result_plot4\"),\n                 plotOutput(\"result_plot5\"),\n                 plotOutput(\"result_plot6\")\n        ),\n        \n        #Spot for capital table\n        tabPanel(\"Portfolio Value Table\",\n                 h3(\"Portfolio Value Over Time (All Trials)\"),\n                 DTOutput(\"capital_table_dt\"),  # <- show capital table here\n                 downloadButton(\"download_capital\", \"Download Portfolio Value Table\")\n        ),\n        \n        #Spot for withdrawal table\n        tabPanel(\"Withdrawal Table\",\n                 h3(\"Withdrawal Amounts (All Trials)\"),\n                 DTOutput(\"withdrawal_table_dt\"),  # <- show withdrawal table here\n                 downloadButton(\"download_withdrawal\", \"Download Withdrawal Table\")\n        ),\n        \n        #Spot for portfolio returns table\n        tabPanel(\"Portfolio Returns\",\n                 h3(\"Portfolio Returns by Year (All Trials)\"),\n                 DTOutput(\"portfolio_table_dt\"),\n                 downloadButton(\"download_portfolio\", \"Download Portfolio Returns Table\")\n        ),\n        \n        #Spot for cashflow table\n        tabPanel(\"Cash Inflows\",\n                 h3(\"Cashflow income by Year (All Trials)\"),\n                 DTOutput(\"cashflow_table_dt\"),\n                 downloadButton(\"download_cashflow\", \"Download Cashflow Income Table\")\n        ),\n        \n        #Checks\n        tabPanel(\"Spending At Floor\",\n                 h3(\"Years Where Spending Were At the Floor\"),\n                 DTOutput(\"floor_table_dt\"),\n                 downloadButton(\"download_floor\", \"Download Spending Floor Table\")\n        ),\n        \n        \n        #Checks\n        tabPanel(\"Spending Below Initial\",\n                 h3(\"Years Where Spending Were Below Initial\"),\n                 DTOutput(\"initial_table_dt\"),\n                 downloadButton(\"download_initial\", \"Download Spending Initial Table\")\n        ),\n        \n        #Information tab\n        tabPanel(\"How to Use the Simulation\",\n                 h3(\"How to Use the Monte Carlo Retirement Simulation\"),\n                 p(\"This simulation models retirement withdrawal strategies under market uncertainty using a Monte Carlo approach.\"),\n                 \n                 h4(\"Inputs\"),\n                 tags$ul(\n                   tags$li(HTML(\"<b>Average Gain (%):<\/b> The average expected annual return of the portfolio.\")),\n                   tags$li(HTML(\"<b>Portfolio Std Dev (%):<\/b> The volatility of the portfolio's returns.\")),\n                   tags$li(HTML(\"<b>Time:<\/b> The number of years for the retirement simulation.\")),\n                   tags$li(HTML(\"<b>Initial Withdrawal Rate (%):<\/b> The withdrawal rate at the start of retirement.<br>\n               - This will be the ceiling spending adjusted for inflation (see in withdrawal graph)\")),\n                   tags$li(HTML(\"<b>Minimum Withdrawal Rate (%):<\/b> The lowest rate you are willing to withdraw.<br>\n               - This will be the floor spending adjusted for inflation (see in withdrawal graph)\")),\n                   tags$li(HTML(\"<b>Probability Thresholds:<\/b> Used to trigger changes in spending based on portfolio performance.<br>\n               - Lower probability of success triggers a spending cut<br>\n               - Higher probability of success triggers a spending increase<br>\n               - Probability of success is calculated through projected withdrawal divided by portfolio value\")),\n                   tags$li(HTML(\"<b>Spending Increase/Decrease (%):<\/b> Adjustment to spending if portfolio performance is strong/weak.\")),\n                   tags$li(HTML(\"<b>Initial Capital:<\/b> The starting amount of money in your retirement account.\")),\n                   tags$li(HTML(\"<b>Inflation Rate (%):<\/b> Assumed annual inflation.\")),\n                   tags$li(HTML(\"<b>Number of Trials:<\/b> How many simulations to run. More trials leads to better estimates.\"))\n                 ),\n                 \n                 h4(\"Outputs\"),\n                 tags$ul(\n                   tags$li(HTML(\"<b>Probability of Success:<\/b> % of simulations where you donâ€™t run out of money.\")),\n                   tags$li(HTML(\"<b>Time at Floor:<\/b> Amount of time withdrawal rate was at the floor (out of all year*trials).\")),\n                   tags$li(HTML(\"<b>Time Below Initial:<\/b> Amount of time withdrawal rate was below the initial withdrawal (out of all year*trials).\")),\n                   tags$li(HTML(\"<b>Spending Cuts:<\/b> % of years where spending had to be cut according to probability of success.\")),\n                   tags$li(HTML(\"<b>Average Ending Portfolio Value:<\/b> Average wealth between all your trials at the end. (inflation adjusted)\")),\n                   tags$li(HTML(\"<b>Percentile Wealth:<\/b> 25/50/75th percentile of wealth left at the end of all your trials. (inflation adjusted)\")),\n                   tags$li(HTML(\"<b>Plot:<\/b> Average capital remaining within each year.(Includes 0 for years without money\")),\n                   tags$li(HTML(\"<b>Plot:<\/b> Median capital remaining within each year. (Includes 0 for years without money)\")),\n                   tags$li(HTML(\"<b>Plot:<\/b> Average withdrawal within each year. (Does NOT include 0 for years without money)\"))\n                 )\n                 \n        )\n      )\n    )\n  ) \n)  \nrun_trigger <- reactiveVal(FALSE)\n\nserver <- function(input, output) {\n  \n  #Shows the simulation running text\n  observeEvent(input$run, {\n    output$status <- renderText(\"Simulation running, please wait...\")\n    run_trigger(TRUE)\n  })\n  \n  \n  \n  observe({\n    \n    #requires to press the button to do the logic\n    req(run_trigger())\n    req(input$run)\n    \n    run_trigger(FALSE)\n    \n    t_input <- input$t_input\n    valid_1 <- TRUE\n    valid_2 <- TRUE\n    valid_3 <- TRUE\n    \n    #Gives Error if inputs are not correct\n    if (input$initial_percent < input$floor_percent) {\n      showModal(modalDialog(\n        title = \"Input Error\",\n        \"Initial Withdrawal Rate must be greater than or equal to the Floor Withdrawal Rate.\",\n        easyClose = TRUE\n      ))\n      valid_1 <- FALSE\n    }\n    \n    #POS check\n    if (as.numeric(input$lowPoS_input) >= as.numeric(input$upPoS_input)) {\n      showModal(modalDialog(\n        title = \"Input Error\",\n        \"Lower Probability Threshold must be less than the Upper Probability Threshold.\",\n        easyClose = TRUE\n      ))\n      valid_2 <- FALSE\n    }\n    \n    #cashflow check\n    check_error <- function(active, range) {\n      if (!active) {\n        return(TRUE)\n      }\n      \n      if (is.null(range)) {\n        return(FALSE)\n      }\n\n      if (active) {\n        if (range[2] > t_input) {\n          showModal(modalDialog(\n            title = \"Input Error\",\n            \"Range of Years Must Be Within the simulation years input.\",\n            easyClose = T\n          ))\n          return(FALSE)\n        }\n      return(TRUE)\n      }\n    }\n    \n    #converts all the inputs to usable variables\n    mean_input <- input$mean_input\n    stdv_input <- input$stdv_input\n    initial_percent <- input$initial_percent/100\n    floor_percent <- input$floor_percent/100\n    lowPoS_input <- input$lowPoS_input\n    upPoS_input <- input$upPoS_input\n    spending.inc_input <- input$spending_inc/100\n    spending.dec_input <- input$spending_dec/100\n    capital_input <- input$capital_input\n    inflation <- input$inflation/100\n    trials <- input$trials\n    \n    \n    #checks each specific cash flow\n    check_error(input$cashflow_1, input$rangeinput_1)\n    check_error(input$cashflow_2, input$rangeinput_2)\n    check_error(input$cashflow_3, input$rangeinput_3)\n    \n    #checks if all cashflow checks were ok\n    valid_3 <- check_error(input$cashflow_1, input$rangeinput_1) && \n               check_error(input$cashflow_2, input$rangeinput_2) &&\n               check_error(input$cashflow_3, input$rangeinput_3)\n    \n    #Checks if all checks were ok\n    valid <- valid_1 && valid_2 && valid_3\n      \n      \n    \n    #Checks if valid is false (from checks earlier) then proceeds if it is true\n    if (valid == F){\n      return()\n    }\n    \n    #Combines cashflow into a list\n    apply_cashflow <- function(active, range, amount, inflation_adjusted, t_input, inflation_rate) {\n      vec <- rep(0, t_input)\n      if (active) {\n        start <- range[1]\n        end <- range[2]\n        for (yr in start:end) {\n          vec[yr] <- if (inflation_adjusted) {\n            amount * (1 + inflation_rate)^(yr - 1)\n          } else {\n            amount\n          }\n        }\n      }\n      return(vec)\n    }\n    \n    #cashflow 1, 2, 3\n    cf1 <- apply_cashflow(input$cashflow_1, input$rangeinput_1, input$flowamount_1, input$inflation_1, t_input, inflation)\n    cf2 <- apply_cashflow(input$cashflow_2, input$rangeinput_2, input$flowamount_2, input$inflation_2, t_input, inflation)\n    cf3 <- apply_cashflow(input$cashflow_3, input$rangeinput_3, input$flowamount_3, input$inflation_3, t_input, inflation)\n    \n    # Combine all cash flows into one stream\n    total_cashflow <- cf1 + cf2 + cf3\n    \n    \n    #removes scientific notation in table\n    options(scipen = 999)\n    \n    #Assigns actual numbers to percentage inputs\n    initial_input <- initial_percent * capital_input\n    floor_input <- floor_percent * capital_input\n    \n    #Loops for inflation initial and floor\n    inflation_initial = c(initial_input)\n    inflation_floor = c(floor_input)\n    \n    #Pre makes the list for the inflation floor and initial through the years\n    #it is t_input - 1 because the list already has the previous value in it (row 24-25)\n    for (i in 1:(t_input-1)) {\n      inflation_initial <- c(inflation_initial, (inflation_initial[i] * (1+inflation)))\n      inflation_floor <- c(inflation_floor, (inflation_floor[i] * (1+inflation)))\n    }\n    \n    \n    #Defining Counters\n    ranout = 0\n    wealth_storage = c()\n    timefloor = 0\n    timebelowinitial = 0\n    spendingcut = 0\n    calculate = 0\n    timebelowinitial_year = 0\n    timefloor_year = 0\n    \n    # Create matrix filled with NA\n    empty_matrix <- matrix(NA, nrow = t_input, ncol = trials)\n    special_matrix <- matrix(0, nrow = (t_input), ncol = trials)\n    \n    # Creates sheet for capital data storage\n    capital_table <- as.data.frame(empty_matrix)\n    colnames(capital_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(capital_table) <- paste0(\"year\", ' ', 1:t_input)\n    \n    # Creates sheet for withdrawal amount data storage\n    withdrawal_table <- as.data.frame(empty_matrix)\n    colnames(withdrawal_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(withdrawal_table) <- paste0(\"year\", ' ', 1:t_input)\n    \n    # Creates sheet for probability of success amount data storage\n    lowPoS_table <- as.data.frame(empty_matrix)\n    colnames(lowPoS_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(lowPoS_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    upPoS_table <- as.data.frame(empty_matrix)\n    colnames(upPoS_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(upPoS_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    # Creates sheet for probability of success amount data storage\n    Portfolio_table <- as.data.frame(empty_matrix)\n    colnames(Portfolio_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(Portfolio_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    # Creates sheet for probability of success amount data storage\n    timebelowinitial_year_table <- as.data.frame(special_matrix)\n    colnames(timebelowinitial_year_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(timebelowinitial_year_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    # Creates sheet for probability of success amount data storage\n    timefloor_year_table <- as.data.frame(special_matrix)\n    colnames(timefloor_year_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(timefloor_year_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    # Creates sheet for cashflow return of each year\n    cashflow_table <- as.data.frame(empty_matrix)\n    colnames(cashflow_table) <- paste0(\"trial\", ' ', 1:trials)\n    rownames(cashflow_table) <- paste0(\"year\", ' ', 1:(t_input))\n    \n    #Checks if lower PoS is lower number than upper PoS, if not, stops and breaks code\n    \n    #Stores PoS Lists \n    PoS_list <- list(\n      pos20 = c(\n        0.0565, 0.0570, 0.0575, 0.0580, 0.0584, 0.0588, 0.0592, 0.0596,\n        0.0600, 0.0605, 0.0610, 0.0615, 0.0620, 0.0625, 0.0631, 0.0638,\n        0.0645, 0.0654, 0.0665, 0.0677, 0.0690, 0.0704, 0.0718, 0.0731,\n        0.0745, 0.0759, 0.0774, 0.0790, 0.0810, 0.0831, 0.0854, 0.0880,\n        0.0912, 0.0945, 0.0980, 0.1025, 0.1075, 0.1130, 0.1195, 0.1275,\n        0.1375, 0.1490, 0.1625, 0.1815, 0.2060, 0.2390, 0.2890, 0.3715,\n        0.5360\n      ),\n      \n      pos30 = c(\n        0.0500, 0.0505, 0.0510, 0.0515, 0.0520, 0.0523, 0.0526, 0.0530, 0.0535,\n        0.0540, 0.0545, 0.0552, 0.0558, 0.0565, 0.0572, 0.0580, 0.0587, 0.0595,\n        0.0605, 0.0615, 0.0625, 0.0635, 0.0650, 0.0662, 0.0675, 0.0690, 0.0705,\n        0.0725, 0.0745, 0.0765, 0.0790, 0.0815, 0.0845, 0.0875, 0.0915, 0.0955,\n        0.1000, 0.1060, 0.1125, 0.1200, 0.1300, 0.1410, 0.1550, 0.1725, 0.1970,\n        0.2300, 0.2800, 0.3625, 0.5250\n      ),\n      \n      pos40 = c(\n        0.0455, 0.0460, 0.0464, 0.0468, 0.0472, 0.0476, 0.0480, 0.0485, 0.0490,\n        0.0494, 0.0498, 0.0503, 0.0509, 0.0515, 0.0522, 0.0530, 0.0538, 0.0545,\n        0.0554, 0.0564, 0.0575, 0.0585, 0.0596, 0.0608, 0.0621, 0.0636, 0.0652,\n        0.0670, 0.0690, 0.0710, 0.0733, 0.0758, 0.0788, 0.0822, 0.0860, 0.0900,\n        0.0944, 0.1000, 0.1065, 0.1140, 0.1230, 0.1340, 0.1475, 0.1650, 0.1890,\n        0.2230, 0.2725, 0.3550, 0.5200\n      ),\n      \n      pos50 = c(\n        0.0414, 0.0418, 0.0421, 0.0425, 0.0429, 0.0433, 0.0437, 0.0441, 0.0445,\n        0.0450, 0.0455, 0.0460, 0.0466, 0.0473, 0.0480, 0.0487, 0.0495, 0.0503,\n        0.0511, 0.0519, 0.0527, 0.0538, 0.0550, 0.0563, 0.0576, 0.0590, 0.0605,\n        0.0622, 0.0644, 0.0665, 0.0685, 0.0710, 0.0740, 0.0770, 0.0805, 0.0845,\n        0.0889, 0.0945, 0.1010, 0.1085, 0.1170, 0.1280, 0.1415, 0.1590, 0.1830,\n        0.2150, 0.2645, 0.3470, 0.5110\n      ),\n      \n      pos60 = c(\n        0.0375, 0.0379, 0.0383, 0.0386, 0.0389, 0.0393, 0.0397, 0.0401, 0.0405,\n        0.0410, 0.0415, 0.0420, 0.0425, 0.0431, 0.0437, 0.0444, 0.0452, 0.0460,\n        0.0468, 0.0477, 0.0486, 0.0496, 0.0507, 0.0518, 0.0531, 0.0545, 0.0560,\n        0.0576, 0.0595, 0.0615, 0.0637, 0.0662, 0.0690, 0.0720, 0.0755, 0.0795,\n        0.0840, 0.0894, 0.0955, 0.1025, 0.1110, 0.1220, 0.1355, 0.1530, 0.1760,\n        0.2080, 0.2575, 0.3400, 0.5030\n      ),\n      \n      pos70 = c(\n        0.0335, 0.0339, 0.0343, 0.0346, 0.0349, 0.0352, 0.0356, 0.0360, 0.0364, 0.0368,\n        0.0372, 0.0377, 0.0383, 0.0390, 0.0397, 0.0405, 0.0412, 0.0419, 0.0426, 0.0433,\n        0.0441, 0.0452, 0.0464, 0.0477, 0.0490, 0.0503, 0.0516, 0.0531, 0.0547, 0.0567,\n        0.0589, 0.0613, 0.0640, 0.0670, 0.0705, 0.0740, 0.0785, 0.0839, 0.0895, 0.0965,\n        0.1050, 0.1160, 0.1290, 0.1455, 0.1685, 0.2005, 0.2500, 0.3310, 0.4940\n      ),\n      \n      pos80 = c(\n        0.0290, 0.0293, 0.0296, 0.0299, 0.0302, 0.0306, 0.0310, 0.0315, 0.0320,\n        0.0325, 0.0330, 0.0335, 0.0340, 0.0345, 0.0350, 0.0355, 0.0361, 0.0368,\n        0.0376, 0.0385, 0.0395, 0.0405, 0.0415, 0.0425, 0.0435, 0.0448, 0.0463,\n        0.0480, 0.0497, 0.0515, 0.0535, 0.0555, 0.0582, 0.0610, 0.0645, 0.0685,\n        0.0725, 0.0775, 0.0831, 0.0900, 0.0980, 0.1080, 0.1210, 0.1375, 0.1605,\n        0.1925, 0.2400, 0.3200, 0.4830\n      )\n      \n    )\n    #Stores PoS use depending on inputs\n    lowPoS <- PoS_list[[paste0(\"pos\", lowPoS_input)]]\n    upPoS <- PoS_list[[paste0(\"pos\", upPoS_input)]]\n    \n    lngthLow <- length(lowPoS)\n    lngthUp <- length(upPoS)\n    \n    # Loops through each trial (trials from the input)\n    for (i in 1:trials) {\n      #Gets the percent run for the portfolio\n      percent_run <- rnorm((t_input), mean = (mean_input/100), sd = (stdv_input/100))\n      \n      #Resets the capital\n      new_capital <- (capital_input - initial_input + total_cashflow[1]) * (1 + percent_run[1])\n\n      #puts in the cashflow\n      cashflow_table[1,i] <- total_cashflow[1]\n      \n      #Puts in the capital \n      capital_table[1, i] <- format(new_capital, big.mark = \",\", scientific = FALSE)\n      \n      #Puts in the initial withdrawal\n      withdrawal_table[1, i] <- format(initial_input, big.mark = \",\", scientific = FALSE)\n      \n      #Resets withdrawal\n      withdrawal <- initial_input\n      \n      #Resets floor price\n      floor <- floor_input\n      \n      #Adds a year to the calculator cause this is considered a year\n      calculate <- calculate + 1\n      \n      #Stores portfolio run in the first year\n      Portfolio_table[1,i] <- paste0((round(100*percent_run[1],2)), \"%\")\n      \n      #Resets it\n      timebelowinitial_year = 0\n      \n      #Resets it\n      timefloor_year = 0\n      \n      timebelowinitial_year_table[1,i] = timebelowinitial_year\n      timefloor_year_table[1,i] = timefloor_year\n      \n      for (x in 2:t_input) {\n        #Resets it\n        timebelowinitial_year = 0\n        \n        #Resets it\n        timefloor_year = 0\n        \n        #Adds cashflow before to make accurate withdrawal amount\n        new_capital <- (new_capital + total_cashflow[x])\n        \n        #Adds cashflow to table\n        cashflow_table[x,i] <- total_cashflow[x]\n        \n        #Deal with the withdrawal\n        distribution_rate <- ((withdrawal*(1+inflation))/new_capital)\n        \n        #If dist rate is greater than low PoS and the withdrawal is bigger than the floor\n        #Decrease the withdrawal by inputted percentage\n        #Adds 1 to the counter of dec. spending\n        if (distribution_rate > lowPoS[lngthLow - t_input + x] & withdrawal > inflation_floor[x])  {\n          withdrawal <- withdrawal * (1-spending.dec_input) * (1 + inflation)\n          spendingcut <- spendingcut + 1\n          \n          #Check to make sure new value isnt too low either\n          #if so, it will add to the time floor\n          if (withdrawal <= inflation_floor[x]) {\n            withdrawal <- inflation_floor[x]\n            timefloor <- timefloor + 1\n            timefloor_year <- timefloor_year + 1\n          }\n          \n          #If the dist rate is lower than the upper PoS then\n          #increase the spending by the percentage indicated\n        } else if (distribution_rate < upPoS[lngthUp - t_input + x]) {\n          withdrawal <- withdrawal * (1+spending.inc_input) * (1 + inflation)\n          \n          if (withdrawal > inflation_initial[x]) {\n            withdrawal <- inflation_initial[x]\n          }\n          #If the withdrawal is below the floor\n          #Adds to the time floor\n        } else if ((withdrawal*(1+inflation)) == inflation_floor[x]) {\n          withdrawal <- inflation_floor[x]\n          timefloor <- timefloor + 1\n          timefloor_year <- timefloor_year + 1\n          timefloor_year_table[x,i] <- timefloor_year\n          \n          #If none others are true, it will increase the spending by inflation rate\n        } else if ((withdrawal*(1+inflation)) > inflation_initial[x]) {\n          withdrawal <- inflation_initial[x]  \n          \n        } else {\n          withdrawal <- withdrawal * (1+inflation)\n        }\n        #Dealing with capital value\n        #Technically withdrawal is done and then percent run at the end of the year\n        #But this is equivelant\n        new_capital <- (new_capital - withdrawal) * (1 + percent_run[x])\n        \n        \n        #Adds one to the calculator to determine actual years\n        calculate <- calculate + 1\n        \n        #Checks if capital reaches below 0 and will \n        #stop trial if done so\n        #Add 0 to the wealth table\n        #Add 0 to capital distribution\n        if (new_capital < 0) {\n          ranout <- ranout + 1\n          capital_table[x,i] <- 0\n          spendingcut <- spendingcut + 1\n          timebelowinitial <- timebelowinitial + 1\n          withdrawal_table[x, i] <- format(round(withdrawal + (new_capital/(1+ percent_run[x])), 2), big.mark = \",\", scientific = FALSE)\n          wealth_storage <- c(wealth_storage,0)\n          Portfolio_table[x,i] <- \"No Money\"\n          break\n        }\n        \n        #Adds capital to table if money is actually remaining\n        capital_table[x, i] <- format(new_capital, big.mark = \",\", scientific = FALSE)\n        \n        #Stores PoS\n        lowPoS_table[x,i] <- lowPoS[lngthLow - t_input + x]\n        upPoS_table[x,i] <- upPoS[lngthUp - t_input + x]\n        \n        #Stores Percent run of portfolio\n        Portfolio_table[x,i] <- paste0((round(100*percent_run[x],2)), \"%\")\n        \n        #If dist rate is greater than low PoS and the withdrawal is bigger than the floor\n        #Decrease the withdrawal by inputted percentage\n        #Adds 1 to the counter of dec. spending\n        \n        #Adds withdrawal amount to the data sheet\n        withdrawal_table[x, i] <- format(withdrawal, big.mark = \",\", scientific = FALSE)\n        \n        \n        #Checks for counters\n        if (withdrawal < inflation_initial[x]) {\n          timebelowinitial <- timebelowinitial + 1\n          timebelowinitial_year <- timebelowinitial_year + 1\n        }\n        \n        timefloor_year_table[x,i] <- timefloor_year\n        timebelowinitial_year_table[x,i] <- timebelowinitial_year\n        \n        \n        #Checks for end of specific trial\n        if (x == t_input){\n          #Store wealth\n          wealth_storage <- c(wealth_storage, new_capital)\n        } \n      }  \n    }\n    \n    \n    #Separate Sheet for Wealth Distribution\n    wealth_distribution = data.frame(\n      `Wealth Distribution (Sorted)` = format(\n        round(sort(wealth_storage), 2),\n        big.mark = \",\",\n        scientific = FALSE\n      )\n    )\n    \n    sorted_wealth <- sort(wealth_storage)\n    \n    # Calculate index for percentiles\n    percentile_25 <- round(0.25 * trials)\n    percentile_50 <- round(0.5 * trials)\n    percentile_75 <- round(0.75 * trials)\n    \n    # Create data frame for outputs\n    outputs = data.frame(\n      Probability.of.success = paste0(100 - (ranout / 10), \"%\"),\n      Time.At.Floor = paste0(round((100 * timefloor) / (trials * t_input), 1), \"%\"),\n      Time.below.initial = paste0(round((100 * timebelowinitial) / (trials * t_input), 1), \"%\"),\n      Amount.of.times.spending.cut = paste0(round((100 * spendingcut) / (trials * t_input), 1), \"%\"),\n      Average.of.Wealth = paste0(\n        \"$\", format(round((mean(wealth_storage))/(1+inflation)**t_input), big.mark = \",\", scientific = FALSE)\n      ),\n      Median.of.Wealth = paste0(\n        \"$\", format(round((median(sorted_wealth))/(1+inflation)**t_input), big.mark = \",\", scientific = FALSE)\n      ),\n      Percentile25.of.Wealth = paste0(\n        \"$\", format(round((sorted_wealth[percentile_25])/(1+inflation)**t_input), big.mark = \",\", scientific = FALSE)\n      ),\n      Percentile75.of.Wealth = paste0(\n        \"$\", format(round((sorted_wealth[percentile_75])/(1+inflation)**t_input), big.mark = \",\", scientific = FALSE)\n      )\n    )\n    \n    \n    \n    # Set column names\n    colnames(outputs) <- c(\"Probability of Success\",\n                           \"Time At Floor Overall\",\n                           \"% of Time Below Initial\",\n                           \"% of Time Spending was Cut\",\n                           \"Average Ending Portfolio Value\",\n                           \"50th Percentile of Ending Portfolio Value\",\n                           \"25th Percentile of Ending Portfolio Value\",\n                           \"75th Percentile of Ending Portfolio Value\")\n    \n    #Creates variables for graph display\n    y_mean <- c(capital_input)\n    y_median <- c(capital_input)\n    y_withdrawal_mean <- c()\n    x <- c(0)\n    x_withdrawal <- c()\n    y_capital <- c()\n    y_withdrawal <- c()\n    \n    y_mean_inflation <- c(capital_input)\n    y_median_inflation <- c(capital_input)\n    y_withdrawal_inflation <- c()\n    \n    #Goes through a loop, grabs all the stuff from a certain year, stores them\n    for (z in 1:t_input){\n      \n      x <- c(x,z)\n      x_withdrawal <- c(x_withdrawal,z)\n      y_capital <- c()\n      y_withdrawal <- c()\n      \n      for (i in 1:trials){\n        if (is.na(capital_table[z, i])) {\n          y_capital <- c(y_capital,0) \n        } else {\n          y_capital <- c(y_capital, as.numeric(gsub(\",\", \"\", capital_table[z,i])))\n        }\n        if (is.na(withdrawal_table[z,i])){\n          #pass\n        } else {\n          y_withdrawal <- c(y_withdrawal, as.numeric(gsub(\",\", \"\", withdrawal_table[z,i])))\n        }\n        \n      }\n      #now stores: at this point, y is a full list\n      y_mean <- c(y_mean, mean(y_capital))\n      y_median <- c(y_median, median(y_capital))\n      y_withdrawal_mean <- c(y_withdrawal_mean, mean(y_withdrawal))\n      \n      y_mean_inflation <- c(y_mean_inflation, (mean(y_capital))/(1+inflation)**z)\n      y_median_inflation <- c(y_median_inflation, (median(y_capital))/(1+inflation)**z)\n      y_withdrawal_inflation <- c(y_withdrawal_inflation, (mean(y_withdrawal))/(1+inflation)**(z-1))\n    }\n    \n    \n    output$outputs1 <- renderTable(outputs)\n    \n    #Displays plot for average capital\n    output$result_plot <- renderPlot({\n      plot(x, y_mean, type = \"l\", col = \"blue\", lwd = 3,\n           xlab = \"Year\", ylab = \"Avg Wealth Each Year\", main = \"Average Wealth Plot\",\n           xaxs = \"i\",  # Removes default horizontal padding\n           yaxs = \"i\",  # Removes default vertical padding\n           ylim = c(max(0, min(y_mean) - 250000), max(y_mean) * 1.1))\n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n    })\n    \n    #Displays plot for median capital\n    output$result_plot2 <- renderPlot({\n      plot(x, y_median, type = \"l\", col = \"red\", lwd = 3,\n           xlab = \"Year\", ylab = \"Median Wealth Each Year\", main = \"Median Wealth Plot\",\n           xaxs = \"i\",  # Removes padding on x-axis\n           yaxs = \"i\",  # Removes padding on y-axis\n           ylim = c(max(0, min(y_median) - 250000), max(y_median) * 1.1))\n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n    })\n    \n    #Displays plot for average withdrawal\n    output$result_plot3 <- renderPlot({\n      par(mar = c(5, 4, 4, 2) + 0.1)\n      plot(x_withdrawal, y_withdrawal_mean, type = \"l\", col = \"green\", lwd = 3,\n           xlab = \"Year\", ylab = \"Average Withdrawal Each Year\", main = \"Average Withdrawal Plot\",\n           xaxs = \"i\",\n           yaxs = \"i\",  \n           ylim = c(max(0, min(inflation_floor) - 10000), max(inflation_initial) * 1.1))\n      \n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n      \n      # Add inflation-adjusted initial and floor lines\n      lines(x_withdrawal, inflation_initial, col = \"blue\", lty = \"dashed\", lwd = 2)\n      lines(x_withdrawal, inflation_floor, col = \"red\", lty = \"dashed\", lwd = 2)\n      \n      #Creates a legend\n      legend(\"topleft\",\n             legend = c(\"Avg Withdrawal\", \"Ceiling Withdrawal\", \"Floor Withdrawal\"),\n             col = c(\"green\", \"blue\", \"red\"),\n             lty = c(\"solid\", \"dashed\", \"dashed\"),\n             lwd = 2,\n             bty = \"o\",\n             bg = \"white\") \n    })\n    \n    #Inflation Adjusted Mean\n    output$result_plot4 <- renderPlot({\n      plot(x, y_mean_inflation, type = \"l\", col = \"blue\", lwd = 3,\n           xlab = \"Year\", ylab = \"Avg Wealth Each Year\", main = \"Average Wealth Plot (inflation-adjusted value)\",\n           xaxs = \"i\",  # Removes default horizontal padding\n           yaxs = \"i\",  # Removes default vertical padding\n           ylim = c(max(0, min(y_mean_inflation) - 250000), max(y_mean_inflation) * 1.1))\n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n    })\n    \n    #Inflation Adjusted Median\n    output$result_plot5 <- renderPlot({\n      plot(x, y_median_inflation, type = \"l\", col = \"red\", lwd = 3,\n           xlab = \"Year\", ylab = \"Median Wealth Each Year\", main = \"Median Wealth Plot (inflation-adjusted value)\",\n           xaxs = \"i\",  # Removes padding on x-axis\n           yaxs = \"i\",  # Removes padding on y-axis\n           ylim = c(max(0, min(y_median_inflation) - 250000), max(y_median_inflation) * 1.1))\n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n    })\n    \n    \n    #Inflation Adjusted Withdrawal\n    output$result_plot6 <- renderPlot({\n      par(mar = c(5, 4, 4, 2) + 0.1)\n      plot(x_withdrawal, y_withdrawal_inflation, type = \"l\", col = \"green\", lwd = 3,\n           xlab = \"Year\", ylab = \"Average Withdrawal Each Year\", main = \"Average Withdrawal Plot (inflation-adjusted value)\",\n           xaxs = \"i\",\n           yaxs = \"i\",  \n           ylim = c(max(0, min(floor_input) - 10000), max(initial_input) * 1.1))\n      \n      grid(col = \"gray50\", lty = \"dotted\", lwd = 1.2)\n      \n      # Add inflation-adjusted initial and floor lines\n      lines(x_withdrawal, rep(initial_input, length(x_withdrawal)), col = \"blue\", lty = \"dashed\", lwd = 2)\n      lines(x_withdrawal, rep(floor_input, length(x_withdrawal)), col = \"red\", lty = \"dashed\", lwd = 2)\n      \n      #Creates a legend\n      legend(\"topleft\",\n             legend = c(\"Avg Withdrawal\", \"Ceiling Withdrawal\", \"Floor Withdrawal\"),\n             col = c(\"green\", \"blue\", \"red\"),\n             lty = c(\"solid\", \"dashed\", \"dashed\"),\n             lwd = 2,\n             bty = \"o\",\n             bg = \"white\") \n    })\n    \n    \n    \n    #Displays the tables in the other column\n    output$capital_table_dt <- renderDT({\n      datatable(capital_table, options = list(scrollX = TRUE))\n    })\n    \n    output$withdrawal_table_dt <- renderDT({\n      datatable(withdrawal_table, options = list(scrollX = TRUE))\n    })\n    \n    output$download_capital <- downloadHandler(\n      filename = function() {\"capital_table.csv\"},\n      content = function(file) {\n        write.csv(capital_table, file, row.names = TRUE)\n      }\n    )\n    \n    output$download_withdrawal <- downloadHandler(\n      filename = function() {\"withdrawal_table.csv\"},\n      content = function(file) {\n        write.csv(withdrawal_table, file, row.names = TRUE)\n      }\n    )\n    output$portfolio_table_dt <- renderDT({\n      datatable(Portfolio_table, options = list(scrollX = TRUE))\n    })\n    \n    output$download_portfolio <- downloadHandler(\n      filename = function() {\"portfolio_table.csv\"},\n      content = function(file) {\n        write.csv(Portfolio_table, file, row.names = TRUE)\n      }\n    )\n    \n    output$cashflow_table_dt <- renderDT({\n      datatable(cashflow_table, options = list(scrollX = TRUE))\n    })\n    \n    output$download_cashflow <- downloadHandler(\n      filename = function() {\"cash_flow.csv\"},\n      content = function(file) {\n        write.csv(cashflow_table, file, row.names = TRUE)\n      }\n    )\n    \n    \n    output$floor_table_dt <- renderDT({\n      datatable(timefloor_year_table, options = list(scrollX = TRUE))\n    })\n    \n    output$download_floor <- downloadHandler(\n      filename = function() {\"timefloor_year_table.csv\"},\n      content = function(file) {\n        write.csv(timefloor_year_table, file, row.names = TRUE)\n      }\n    )\n    \n    output$initial_table_dt <- renderDT({\n      datatable(timebelowinitial_year_table, options = list(scrollX = TRUE))\n    })\n    \n    output$download_initial <- downloadHandler(\n      filename = function() {\"timebelowinitial_year_table.csv\"},\n      content = function(file) {\n        write.csv(timebelowinitial_year_table, file, row.names = TRUE)\n      }\n    )\n    \n    output$status <- renderText({\"Simulation complete!\"})\n    run_trigger(FALSE)\n    \n  })\n}\n\n#Puts it all together (ui variable and server variable)\nshinyApp(ui = ui, server = server)\n","type":"text"}]
